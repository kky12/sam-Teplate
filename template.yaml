

# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Topfan-Lite-dev
# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  StageName:
    Type: String
    Default: dev

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
 
  users:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: users
      CodeUri: users/
      Handler: src/handlers/users.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: This function will handle the users methods and events  
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TopFansDb
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref TopFansDb
      Events:
        GetAllUsersApi:
          Type: HttpApi
          Properties:
            Path: /users # Create user
            Method: GET
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        CreateUserApi:
          Type: HttpApi
          Properties:
            Path: /users # Create user
            Method: POST
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        UpsertUsersApi:
          Type: HttpApi
          Properties:
            Path: /users # Update user
            Method: PUT
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        SignInAPI:
          Type: HttpApi
          Properties:
            Path: /users/login # Login
            Method: POST
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        VerifyUserAPI:
          Type: HttpApi
          Properties:
            Path: /users/verify # Verify User
            Method: POST
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  feeds:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: feeds
      CodeUri: feeds/
      Handler: src/handlers/feeds.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: This function will handle the users posts and feeds
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TopFansDb
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref TopFansDb
      Events:
        createUser:
          Type: HttpApi
          Properties:
            Path: /feeds # Dummy route
            Method: PUT
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600


  category:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: category
      CodeUri: category/
      Handler: src/handlers/categories.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: This function will handle the users categories
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Category
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Category
      Events:
        createCategory:
          Type: HttpApi
          Properties:
            Path: /category
            Method: POST
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        updateCategory:
          Type: HttpApi
          Properties:
            Path: /category/{pk}/{sk}
            Method: PUT
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        getAllCategory:
          Type: HttpApi
          Properties:
            Path: /category
            Method: GET
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        getCategoryById:
          Type: HttpApi
          Properties:
            Path: /category/{pk}/{sk}
            Method: GET
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
        deleteCategory:
          Type: HttpApi
          Properties:
            Path: /category/{pk}/{sk}
            Method: DELETE
            ApiId: !Ref HttpApi
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  # # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable


  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      CorsConfiguration:
        AllowOrigins:
        - "*"
        AllowHeaders:
        - "*"
        AllowMethods:
        - GET
        - PUT
        - POST
        - DELETE
        - PATCH
        MaxAge: 120
        AllowCredentials: false
      RouteSettings:
        "POST /users":
          ThrottlingBurstLimit: 500 
        "PUT /users":
          ThrottlingBurstLimit: 500 
        "PUT /feeds":
          ThrottlingBurstLimit: 500 



  TopFansDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TopFansDbTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0
  
  Category:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Category
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !Ref topfan-dev-subnet      
      SecurityGroups:
      - !Ref topfanlite-dev-sg
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: usersInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt users.Arn
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: feedsInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt feeds.Arn
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: categoryInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt category.Arn        
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      Port: 443
      Protocol: HTTPS
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
Outputs:
  LoadBalancerDNSNAme:
    Value: !GetAtt LoadBalancer.DNSName        
